[{"path":[]},{"path":"https://wright13.github.io/imd-fetchaccess-package/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sarah Wright. Author, maintainer.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wright S (2024). fetchaccess: Fetch Data Metadata Access. R package version 0.2.0, https://wright13.github.io/imd-fetchaccess-package/.","code":"@Manual{,   title = {fetchaccess: Fetch Data And Metadata From Access},   author = {Sarah Wright},   year = {2024},   note = {R package version 0.2.0},   url = {https://wright13.github.io/imd-fetchaccess-package/}, }"},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"accessr-data-dictionary-creator","dir":"","previous_headings":"","what":"Fetch Data And Metadata From Access","title":"Fetch Data And Metadata From Access","text":"Sarah Wright 2023-12-18","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"about-this-package","dir":"","previous_headings":"","what":"About this package","title":"Fetch Data And Metadata From Access","text":"fetchaccess R package Access tool designed simplify process retrieving data metadata Access database. package doesn’t create EML metadata file, produce set data dictionaries compatible EMLassemblyline package replace template files generates otherwise populated manually.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fetch Data And Metadata From Access","text":"Run code RStudio console. may need install remotes package first install.packages(\"remotes\").","code":"remotes::install_github(\"wright13/imd-fetchaccess-package\")"},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"Fetch Data And Metadata From Access","text":"R package works concert Access tool. Access table/column metadata can accessed via VBA, Access tool creates tables queries metadata can read R. setup steps take little bit time, need performed per database!","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"step-1-get-the-template-database","dir":"","previous_headings":"","what":"Step 1: Get the template database","title":"Fetch Data And Metadata From Access","text":"installing R package, first step retrieve template database contains components Access tool. Run following code retrieve template database:","code":"destination_folder <- \"C:\\\\Users\\\\yourusername\\\\Documents\"  # Change this to wherever you want to save the template db fetchaccess::getTemplateDatabase(destination_folder)"},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"step-2-copy-tools-from-template-db-to-your-db","dir":"","previous_headings":"","what":"Step 2: Copy tools from template db to your db","title":"Fetch Data And Metadata From Access","text":"Screenshot objects copied template working database six objects must copied template database protocol database: tsys_Units (lookup table standard EML units) frmMakeDataDict (form filling metadata) frmEditLookupInfo (subform) frmEditAttributeInfo (subform) AutoExec (macro opening frmMakeDataDict database opens) mod_DocumentationTools (module containing VBA code metadata retrieval & wrangling) tools work frontend backend database. ’s generally best put backend. However, one frontend connects identical backends, may want put tools frontend (may want remove modify AutoExec macro). Use Ctrl + click select , right click select Copy. Open protocol database, right click anywhere navigation pane select Paste. point, longer need template database - can deleted. can always use fetchaccess::getTemplateDatabase retrieve another copy need another project.","code":""},{"path":[]},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"create-data-export-queries-in-your-protocol-database","dir":"","previous_headings":"Step 3: Make sure the data are good to go","what":"Create data export queries in your protocol database","title":"Fetch Data And Metadata From Access","text":"Screenshot export query list Access, using ‘qExport’ prefix haven’t done already, first step process create saved Access queries wrangle relational database tables flat format suitable CSV export. general, try summarize perform calculations stage. Instead, aim make query less standalone including site- visit-level information like park, site, visit date, etc. Generally, also replace integer foreign keys lookup tables meaningful short code defined lookup table. tool works best queries built tables , saved sub-queries. absolutely must use sub-queries, aware column descriptions may retrieved automatically. store date time information appropriate date/time data type Access, text. tables store information text, consider converting export queries. Name queries consistent prefix - necessary automated metadata generation. “qExport” set default, may choose different prefix conflicts existing naming scheme.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"fill-in-some-information-manually","dir":"","previous_headings":"Step 3: Make sure the data are good to go","what":"Fill in some information manually","title":"Fetch Data And Metadata From Access","text":"navigation pane protocol database, double click frmMakeDataDict. form open Start tab. , navigate . Enter prefixes data export queries lookup tables. can edit form change default values fields like. prefix contains underscore, e.g. qExport_MyData, make sure include underscore enter prefix. Click Create Metadata. generate metadata automatically, create EML-compatible data dictionary, need fill information manually. good news need (remember update make changes database). see two tabs called Add Lookup Info Add Column Info.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"adding-lookup-info","dir":"","previous_headings":"Step 3: Make sure the data are good to go > Fill in some information manually","what":"Adding lookup info","title":"Fetch Data And Metadata From Access","text":"Ultimately, table allow codes /ID’s exported data mapped definitions. Go Add Lookup Info tab frmMakeDataDict. everything gone well point, lookupName column populated names lookup tables database. may case lookup tables aren’t used export queries, codes self-explanatory (e.g. “yes/”). can delete rows skip . may tables using lookups aren’t named accordingly (e.g. “tbl_Sites”). Add rows tables. determine column lookup contains values appear export query (usually primary key code). Enter name column keyColumnName. determine column lookup clearly defines meaning code ID. Enter name column definitionColumnName. done adding lookup table info! Just remember update modify, create, delete lookup table future.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"adding-attribute-info","dir":"","previous_headings":"Step 3: Make sure the data are good to go > Fill in some information manually","what":"Adding attribute info","title":"Fetch Data And Metadata From Access","text":"table contains metadata columns exported data. EML refers data columns “attributes”, ’ll use term . “Columns” refer columns metadata tables see Access tool. metadata populated can automated, information need provide manually. Go Add Attribute Info tab frmMakeDataDict. first four columns (tableName, attributeName, attributeDefinition, class) fully populated information attribute export query. modify delete data columns. unit present dropdown list, enter anyway. Make sure contains spaces special characters enter consistently time. record custom unit later, EML generation section Data Release Report. Populate missingValueCode missingValueCodeExplanation columns. need fill non-categorical attributes (.e. things associated lookup table) use codes instead addition blanks indicate missing data (e.g. -999, “ND”). Populate lookup column attributes whose values come lookup table. attributes, leave blank. dropdown show lookup tables found Add Lookup Info tab. add delete lookups, may need close frmMakeDataDict reopen appear dropdown. Populate dateTimeFormatString column Date/Time attributes. Choose format like data displayed saved . strongly recommended choose ISO 8601 formatting dates times. Unfortunately, MS Access store time zone information. data includes times, may want add column data table indicates time zone using UTC offset tz database time zones. done Access! Now can use R package read data metadata R.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"working-with-your-data-in-r","dir":"","previous_headings":"","what":"Working with your data in R","title":"Fetch Data And Metadata From Access","text":"’re expert R, don’t worry! one step retrieve data export flat files.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"retrieve-data-from-access","dir":"","previous_headings":"","what":"Retrieve data from Access","title":"Fetch Data And Metadata From Access","text":"function need know called fetchFromAccess. ’ll need provide basic information: path Access database (whichever file copied Access tools ) prefix(es) identify data export queries prefix(es) identify lookup tables want write data flat files, may also want: path folder want store data exports (provided, defaults data/final current working directory) path folder want store data dictionary files (provided, defaults data/dictionary current working directory) path folder want store lookup table exports (required EML creation, provided, aren’t exported) can explore data R want , can use automate metadata creation process. comfortable R, check documentation (run ?fetchaccess::fetchFromAccess RStudio console) data wrangling customization options.","code":"database_path <- file.path(\"C\", \"Users\", \"myusername\", \"myAccessDB.accdb\")  # Edit this to point to your database export_prefix <- \"qExport_\"  # For multiple prefixes, use the syntax c(\"prefix\", \"otherprefix\") lkup_prefix <- \"tlu_\"  # This also accepts multiple prefixes - see above export_folder <- file.path(\"C\", \"Users\", \"myusername\", \"data_exports\")  # Hopefully your actual folders are better organized than this! dict_folder <- file.path(export_folder, \"dictionary\")  my_dataset <- fetchaccess::fetchFromAccess(db_path = database_path,                                            data_prefix = export_prefix,                                            lookup_prefix = lkup_prefix,                                            save_to_files = TRUE,                                            data_dir = export_folder,                                            dictionary_dir = dict_folder)"},{"path":"https://wright13.github.io/imd-fetchaccess-package/index.html","id":"next-steps","dir":"","previous_headings":"","what":"Next steps!","title":"Fetch Data And Metadata From Access","text":"See NPSDataverse family R packages tools help finish creating data package EML metadata.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/fetchAndTidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch and tidy data — fetchAndTidy","title":"Fetch and tidy data — fetchAndTidy","text":"Fetch tidy data","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/fetchAndTidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch and tidy data — fetchAndTidy","text":"","code":"fetchAndTidy(tbl_name, connection, as.is)"},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/fetchAndTidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch and tidy data — fetchAndTidy","text":"tbl_name Name data table connection Database connection object .() columns returned character     converted another type?  Allowed values     read.table.  See ‘Details’.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/fetchAndTidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch and tidy data — fetchAndTidy","text":"tibble tidy data","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/fetchFromAccess.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch data from Access database — fetchFromAccess","title":"Fetch data from Access database — fetchFromAccess","text":"function assumes using Access Metadata Generator Access database.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/fetchFromAccess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch data from Access database — fetchFromAccess","text":"","code":"fetchFromAccess(   db_path,   data_prefix = \"qExport\",   data_regex = paste0(\"(^\", data_prefix, \".*)\", collapse = \"|\"),   lookup_prefix = \"tlu\",   lookup_regex = paste0(\"(^\", lookup_prefix, \".*)\", collapse = \"|\"),   as.is = FALSE,   add_r_classes = TRUE,   custom_wrangler,   save_to_files = FALSE,   remove_empty_tables = TRUE,   ... )"},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/fetchFromAccess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch data from Access database — fetchFromAccess","text":"db_path Path Access database data_prefix Character vector prefix(es) used Access database indicate data export tables /queries.sure include special characters like underscores (e.g. 'tbl_'). using data_regex argument, sure include prefixes matched tables. data_regex Regular expression match names data tables. can ignore data table prefix(es) specific tables want read . want read subset tables specified data_prefix, use argument specify tables want. data_prefix still required, used clean table names. lookup_prefix Character vector prefix(es) used Access database indicate lookup tables. sure include special characters like underscores (e.g. 'tlu_'). using lookup_regex argument, sure include prefixes matched tables. lookup_regex Regular expression match names lookup tables. can ignore lookup table prefix(es) specific lookups want read . want read subset lookup tables specified lookup_prefix, use argument specify tables want. argument especially useful one two tables labeled 'data' tables (e.g. tbl_Sites) act lookups cases. lookup_prefix still required, used clean lookup names. .() columns returned character     converted another type?  Allowed values     read.table.  See ‘Details’. add_r_classes DEPRECATED. Ignore allow default TRUE. Include R classes addition EML classes? custom_wrangler Optional - function takes arguments data, lookups, metadata. data lookups lists whose names content correspond data lookup tables database. Names include prefixes. metadata contains tibble field-level metadata called MetadataAttributes. See qsys_MetadataAttributes Access database contents tibble. function perform necessary data wrangling specific dataset return named list containing data, lookups, metadata contents modified needed. remove add tibbles data lookups modify names. add, remove, rename columns tibble data, must modify contents metadata accordingly. modify structure column names metadata. structure column names lookups also left -. Typically necessary modification lookups filter overly large species lists include taxa appear data. save_to_files Save data data dictionaries files hard drive? remove_empty_tables Omit empty data lookup tables imported dataset? Default TRUE. ... Options pass writeToFiles()","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/fetchFromAccess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch data from Access database — fetchFromAccess","text":"nested list containing three lists tibbles: data, lookups, metadata.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/fetchFromAccess.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch data from Access database — fetchFromAccess","text":"See RODBC::sqlFetch() RODBC::sqlQuery() information .argument.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/fetchaccess-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fetchaccess: Fetch Data And Metadata From Access — fetchaccess-package","title":"fetchaccess: Fetch Data And Metadata From Access — fetchaccess-package","text":"Reads data metadata Access database using metadata generator tool.","code":""},{"path":[]},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/fetchaccess-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fetchaccess: Fetch Data And Metadata From Access — fetchaccess-package","text":"Maintainer: Sarah Wright sarah_wright@nps.gov","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/getRClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to get primary R class of each data column — getRClass","title":"Helper function to get primary R class of each data column — getRClass","text":"Helper function get primary R class data column","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/getRClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to get primary R class of each data column — getRClass","text":"","code":"getRClass(fields, data)"},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/getRClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to get primary R class of each data column — getRClass","text":"fields Fields data dictionary, returned fetchFromAccess data List data tables, returned fetchFromAccess","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/getRClass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to get primary R class of each data column — getRClass","text":"fields additional rClass column","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/getTemplateDatabase.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the metadata generator template database — getTemplateDatabase","title":"Get the metadata generator template database — getTemplateDatabase","text":"Copies metadata generator template database location choice.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/getTemplateDatabase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the metadata generator template database — getTemplateDatabase","text":"","code":"getTemplateDatabase(destination_folder, overwrite_existing = FALSE)"},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/getTemplateDatabase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the metadata generator template database — getTemplateDatabase","text":"destination_folder save template database overwrite_existing template database already exists destination folder, overwritten?","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/makeColSpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate column spec from data dictionary — makeColSpec","title":"Generate column spec from data dictionary — makeColSpec","text":"Given fields data dictionary, create list column specifications can used readr::read_csv() vroom::vroom()","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/makeColSpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate column spec from data dictionary — makeColSpec","text":"","code":"makeColSpec(fields)"},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/makeColSpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate column spec from data dictionary — makeColSpec","text":"fields Fields data dictionary, returned fetchFromAccess","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/makeColSpec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate column spec from data dictionary — makeColSpec","text":"list lists","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/writeToFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Write data and data dictionaries to files — writeToFiles","title":"Write data and data dictionaries to files — writeToFiles","text":"need call function directly unless using write data export function another R package. using package , usually want call fetchFromAccess(save_to_files = TRUE).","code":""},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/writeToFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write data and data dictionaries to files — writeToFiles","text":"","code":"writeToFiles(   all_tables,   data_dir = here::here(\"data\", \"final\"),   dictionary_dir = here::here(\"data\", \"dictionary\"),   dictionary_filenames = c(tables = \"data_dictionary_tables.txt\", attributes =     \"data_dictionary_attributes.txt\", categories = \"data_dictionary_categories.txt\"),   lookup_dir = NA,   verbose = FALSE )"},{"path":"https://wright13.github.io/imd-fetchaccess-package/reference/writeToFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write data and data dictionaries to files — writeToFiles","text":"all_tables Output fetchFromAccess() data_dir Folder store data csv's dictionary_dir Folder store data dictionaries dictionary_filenames Named list names c(\"tables\", \"attributes\", \"categories\") indicating name tables, attributes, categories data dictionaries. encouraged keep default names unless good reason change . lookup_dir Optional folder store lookup tables . left NA, lookups exported. verbose Output feedback console?","code":""}]
